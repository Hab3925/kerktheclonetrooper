<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add product</title>
    <link rel="stylesheet" href="./../css/addProduct.css">
</head>

<body>
    <input type="text" id="title" placeholder="Title..." maxlength="25">
    <input type="text" id="desc" placeholder="Description..." maxlength="200">
    <input type="number" id="price" placeholder="Price" min="0" max="1000" step="10">

    <div id="drop-region">
        <div class="drop-message">
            Drag & Drop images or click to upload
        </div>
        <div id="image-preview"></div>
    </div>
    <input type="button" value="Save" id="save">

    <script src="./../js/main.js"></script>
    <script>
        let dropRegion = document.getElementById("drop-region"),
            imagePreviewRegion = document.getElementById("image-preview"),
            saveButton = document.getElementById("save")

        let fakeInput = document.createElement("input");

        console.log(getCookie("code"))

        fakeInput.type = "file";
        fakeInput.accept = "image/*";
        fakeInput.multiple = true;

        let imgData = []

        let title = document.getElementById("title"),
            desc = document.getElementById("desc"),
            price = document.getElementById("price")

        saveButton.addEventListener('click', (e) => {
            if (!title.value) return alert("You're misssing the title.")
            if (!desc.value) return alert("You're missing the description")
            if (!price.value) return alert("You haven't given a price.")
            let data = {
                title: title.value,
                desc: desc.value,
                price: price.value
            }

            if (imgData[0]) {
                imgData.forEach(img => {
                    if (!img.overlay) return alert("Missing image")
                    uploadImage(img.image, img.overlay, data)
                })
            } else {
                alert("Missing image")
            }
        })

        dropRegion.addEventListener('click', function () {
            fakeInput.click();
        })

        fakeInput.addEventListener("change", function () {
            let files = fakeInput.files;
            handleFiles(files);
        });


        function preventDefault(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        dropRegion.addEventListener('dragenter', preventDefault, false);
        dropRegion.addEventListener('dragleave', preventDefault, false);
        dropRegion.addEventListener('dragover', preventDefault, false);
        dropRegion.addEventListener('drop', preventDefault, false);


        function handleDrop(e) {
            var dt = e.dataTransfer,
                files = dt.files;

            if (files.length) {
                handleFiles(files);
            } else {

                // check for img
                let html = dt.getData('text/html'),
                    match = html && /\bsrc="?([^"\s]+)"?\s*/.exec(html),
                    url = match && match[1];

                if (url) {
                    uploadImageFromURL(url);
                    return;
                }

            }

            function uploadImageFromURL(url) {
                let img = new Image;
                let c = document.createElement("canvas");
                let ctx = c.getContext("2d");

                img.onload = function () {
                    c.width = this.naturalWidth;     // update canvas size to match image
                    c.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);       // draw in image
                    c.toBlob(function (blob) {        // get content as PNG blob

                        // call our main function
                        handleFiles([blob]);

                    }, "image/png");
                };
                img.onerror = function () {
                    alert("Error in uploading");
                }
                img.crossOrigin = "";              // if from different origin
                img.src = url;
            }

        }

        dropRegion.addEventListener('drop', handleDrop, false);

        function handleFiles(files) {
            if (files.length > 5) return alert("Too many images")
            for (i = 0, len = files.length; i < len; i++) {
                if (validateImage(files[i]))
                    previewImage(files[i]);
            }
        }

        function validateImage(image) {
            // check the type
            var validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (validTypes.indexOf(image.type) === -1) {
                alert("Invalid File Type");
                return false;
            }

            // check the size
            var maxSizeInBytes = 10e6; // 10MB
            if (image.size > maxSizeInBytes) {
                alert("File too large (max 10MB)");
                return false;
            }

            return true;
        }

        function previewImage(image) {

            // container
            var imgView = document.createElement("div");
            imgView.className = "image-view";
            imagePreviewRegion.appendChild(imgView);

            // previewing image
            var img = document.createElement("img");
            imgView.appendChild(img);

            // progress overlay
            var overlay = document.createElement("div");
            overlay.className = "overlay";
            overlay.setAttribute("id", "overlay")
            imgView.appendChild(overlay);

            // read the image...
            var reader = new FileReader();
            reader.onload = function (e) {
                img.src = e.target.result;
            }
            reader.readAsDataURL(image)

            imgData.push({ image: image, overlay: overlay })
        }

        function uploadImage(image, overlay, data) {
            // create FormData
            var formData = new FormData();
            formData.append('image', image);
            formData.append('data', JSON.stringify(data))

            var ajax = new XMLHttpRequest();
            ajax.open("POST", "/upload", true);

            ajax.upload.onprogress = function (e) {
                // change progress
                // (reduce the width of overlay)
                var perc = (e.loaded / e.total * 100) || 100,
                    width = 100 - perc;

                overlay.style.width = width;
            }

            ajax.send(formData);
        }


    </script>
</body>

</html>